{"version":3,"sources":["utils/commonFunctions.js","components/ScrollToTop.js","App.js","reportWebVitals.js","index.js"],"names":["retry","fn","retriesLeft","interval","Promise","resolve","reject","then","catch","error","setTimeout","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","Home","lazy","Work","Project","App","Cookies","get","document","body","classList","toggle","pages","pageLink","view","displayName","fallback","map","page","index","exact","path","render","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"qGAAO,SAASA,EAAMC,GAAuC,IAAnCC,EAAkC,uDAApB,EAAGC,EAAiB,uDAAN,IACpD,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BL,IACGM,KAAKF,GACLG,OAAM,SAACC,GACNC,YAAW,WACW,IAAhBR,EAOJF,EAAMC,EAAIC,EAAc,EAAGC,GAAUI,KAAKF,EAASC,GALjDA,EAAOG,KAMRN,SAdX,mC,0JCGe,SAASQ,IACtB,IAAQC,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACRC,OAAOC,SAAS,EAAG,KAClB,CAACJ,IAEG,K,WCJHK,EAAOC,gBAAK,kBAAMlB,aAAM,kBAAM,0DAC9BmB,EAAOD,gBAAK,kBAAMlB,aAAM,kBAAM,oCAC9BoB,EAAUF,gBAAK,kBAAMlB,aAAM,kBAAM,yDAgDxBqB,EA9CH,WAEuB,UADjB,IAAIC,KACRC,IAAI,cACdC,SAASC,KAAKC,UAAUC,OAAO,QAGjC,IAAMC,EAAQ,CACZ,CACEC,SAAU,IACVC,KAAMb,EACNc,YAAa,QAEf,CACEF,SAAU,QACVC,KAAMX,EACNY,YAAa,QAEf,CACEF,SAAU,kBACVC,KAAMV,EACNW,YAAa,SAIjB,OACE,eAAC,IAAD,WACI,cAACpB,EAAD,IACA,cAAC,WAAD,CAAUqB,SAAU,wBAApB,SACE,eAAC,IAAD,WACGJ,EAAMK,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAMH,EAAKL,SACXS,OAAQ,kBAAM,cAACJ,EAAKJ,KAAN,MACTK,MAIX,cAAC,IAAD,CAAUI,GAAG,eCrCVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASV,OACL,cAAC,EAAD,IACFd,SAASyB,eAAe,SAM1BT,M","file":"static/js/main.a120d53f.chunk.js","sourcesContent":["export function retry(fn, retriesLeft = 5, interval = 1000) {\r\n  return new Promise((resolve, reject) => {\r\n    fn()\r\n      .then(resolve)\r\n      .catch((error) => {\r\n        setTimeout(() => {\r\n          if (retriesLeft === 1) {\r\n            // reject('maximum retries exceeded');\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          // Passing on \"reject\" is the important part\r\n          retry(fn, retriesLeft - 1, interval).then(resolve, reject);\r\n        }, interval);\r\n      });\r\n  });\r\n}","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import './App.scss';\r\nimport React, { lazy, Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { retry } from './utils/commonFunctions';\r\nimport Cookies from 'universal-cookie';\r\nimport ScrollToTop from './components/ScrollToTop';\r\nconst Home = lazy(() => retry(() => import('./components/Home')));\r\nconst Work = lazy(() => retry(() => import('./components/Work')));\r\nconst Project = lazy(() => retry(() => import('./components/Work/index')));\r\n\r\nconst App = () => {\r\n  const cookies = new Cookies();\r\n  if (cookies.get('DARK_MODE') === 'true') {\r\n    document.body.classList.toggle('dark');\r\n  }\r\n\r\n  const pages = [\r\n    {\r\n      pageLink: '/',\r\n      view: Home,\r\n      displayName: 'Home'\r\n    },\r\n    {\r\n      pageLink: '/work',\r\n      view: Work,\r\n      displayName: 'Work'\r\n    },\r\n    {\r\n      pageLink: '/work/:workCode',\r\n      view: Project,\r\n      displayName: 'Work'\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Router>\r\n        <ScrollToTop />\r\n        <Suspense fallback={<div />}>\r\n          <Switch>\r\n            {pages.map((page, index) => {\r\n              return (\r\n                <Route\r\n                  exact\r\n                  path={page.pageLink}\r\n                  render={() => <page.view />}\r\n                  key={index}\r\n                />\r\n              );\r\n            })}\r\n            <Redirect to='/' />\r\n          </Switch>\r\n        </Suspense>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}